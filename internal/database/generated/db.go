// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.batchUpdateAppUsageStmt, err = db.PrepareContext(ctx, batchUpdateAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query BatchUpdateAppUsage: %w", err)
	}
	if q.createAppUsageStmt, err = db.PrepareContext(ctx, createAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppUsage: %w", err)
	}
	if q.createDailyUsageStmt, err = db.PrepareContext(ctx, createDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDailyUsage: %w", err)
	}
	if q.deleteAppUsageStmt, err = db.PrepareContext(ctx, deleteAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppUsage: %w", err)
	}
	if q.deleteAppUsageByIDStmt, err = db.PrepareContext(ctx, deleteAppUsageByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppUsageByID: %w", err)
	}
	if q.deleteDailyUsageStmt, err = db.PrepareContext(ctx, deleteDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDailyUsage: %w", err)
	}
	if q.deleteOldAppUsageStmt, err = db.PrepareContext(ctx, deleteOldAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldAppUsage: %w", err)
	}
	if q.deleteOldDailyUsageStmt, err = db.PrepareContext(ctx, deleteOldDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldDailyUsage: %w", err)
	}
	if q.getAllAppsForDateStmt, err = db.PrepareContext(ctx, getAllAppsForDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAppsForDate: %w", err)
	}
	if q.getAllDailyUsageStmt, err = db.PrepareContext(ctx, getAllDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDailyUsage: %w", err)
	}
	if q.getAppUsageByDateStmt, err = db.PrepareContext(ctx, getAppUsageByDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByDate: %w", err)
	}
	if q.getAppUsageByDateRangeStmt, err = db.PrepareContext(ctx, getAppUsageByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByDateRange: %w", err)
	}
	if q.getAppUsageByDateRangePaginatedStmt, err = db.PrepareContext(ctx, getAppUsageByDateRangePaginated); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByDateRangePaginated: %w", err)
	}
	if q.getAppUsageByIDStmt, err = db.PrepareContext(ctx, getAppUsageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByID: %w", err)
	}
	if q.getAppUsageByNameAndDateStmt, err = db.PrepareContext(ctx, getAppUsageByNameAndDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByNameAndDate: %w", err)
	}
	if q.getAppUsageByNameAndDateRangeStmt, err = db.PrepareContext(ctx, getAppUsageByNameAndDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageByNameAndDateRange: %w", err)
	}
	if q.getAppUsageCountByDateRangeStmt, err = db.PrepareContext(ctx, getAppUsageCountByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageCountByDateRange: %w", err)
	}
	if q.getAppUsageHistoryStmt, err = db.PrepareContext(ctx, getAppUsageHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppUsageHistory: %w", err)
	}
	if q.getDailyUsageByDateStmt, err = db.PrepareContext(ctx, getDailyUsageByDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailyUsageByDate: %w", err)
	}
	if q.getDailyUsageByDateRangeStmt, err = db.PrepareContext(ctx, getDailyUsageByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailyUsageByDateRange: %w", err)
	}
	if q.getRecentAppUsageStmt, err = db.PrepareContext(ctx, getRecentAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentAppUsage: %w", err)
	}
	if q.getRecentDailyUsageStmt, err = db.PrepareContext(ctx, getRecentDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentDailyUsage: %w", err)
	}
	if q.getTopAppsByDateStmt, err = db.PrepareContext(ctx, getTopAppsByDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopAppsByDate: %w", err)
	}
	if q.getTopAppsByDateRangeStmt, err = db.PrepareContext(ctx, getTopAppsByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopAppsByDateRange: %w", err)
	}
	if q.getUsageStatsByDateRangeStmt, err = db.PrepareContext(ctx, getUsageStatsByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsageStatsByDateRange: %w", err)
	}
	if q.insertAppUsageStmt, err = db.PrepareContext(ctx, insertAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query InsertAppUsage: %w", err)
	}
	if q.updateAppUsageStmt, err = db.PrepareContext(ctx, updateAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAppUsage: %w", err)
	}
	if q.updateDailyUsageStmt, err = db.PrepareContext(ctx, updateDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDailyUsage: %w", err)
	}
	if q.upsertAppUsageStmt, err = db.PrepareContext(ctx, upsertAppUsage); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertAppUsage: %w", err)
	}
	if q.upsertDailyUsageStmt, err = db.PrepareContext(ctx, upsertDailyUsage); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertDailyUsage: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.batchUpdateAppUsageStmt != nil {
		if cerr := q.batchUpdateAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchUpdateAppUsageStmt: %w", cerr)
		}
	}
	if q.createAppUsageStmt != nil {
		if cerr := q.createAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppUsageStmt: %w", cerr)
		}
	}
	if q.createDailyUsageStmt != nil {
		if cerr := q.createDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDailyUsageStmt: %w", cerr)
		}
	}
	if q.deleteAppUsageStmt != nil {
		if cerr := q.deleteAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppUsageStmt: %w", cerr)
		}
	}
	if q.deleteAppUsageByIDStmt != nil {
		if cerr := q.deleteAppUsageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppUsageByIDStmt: %w", cerr)
		}
	}
	if q.deleteDailyUsageStmt != nil {
		if cerr := q.deleteDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDailyUsageStmt: %w", cerr)
		}
	}
	if q.deleteOldAppUsageStmt != nil {
		if cerr := q.deleteOldAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldAppUsageStmt: %w", cerr)
		}
	}
	if q.deleteOldDailyUsageStmt != nil {
		if cerr := q.deleteOldDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldDailyUsageStmt: %w", cerr)
		}
	}
	if q.getAllAppsForDateStmt != nil {
		if cerr := q.getAllAppsForDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAppsForDateStmt: %w", cerr)
		}
	}
	if q.getAllDailyUsageStmt != nil {
		if cerr := q.getAllDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDailyUsageStmt: %w", cerr)
		}
	}
	if q.getAppUsageByDateStmt != nil {
		if cerr := q.getAppUsageByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByDateStmt: %w", cerr)
		}
	}
	if q.getAppUsageByDateRangeStmt != nil {
		if cerr := q.getAppUsageByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByDateRangeStmt: %w", cerr)
		}
	}
	if q.getAppUsageByDateRangePaginatedStmt != nil {
		if cerr := q.getAppUsageByDateRangePaginatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByDateRangePaginatedStmt: %w", cerr)
		}
	}
	if q.getAppUsageByIDStmt != nil {
		if cerr := q.getAppUsageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByIDStmt: %w", cerr)
		}
	}
	if q.getAppUsageByNameAndDateStmt != nil {
		if cerr := q.getAppUsageByNameAndDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByNameAndDateStmt: %w", cerr)
		}
	}
	if q.getAppUsageByNameAndDateRangeStmt != nil {
		if cerr := q.getAppUsageByNameAndDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageByNameAndDateRangeStmt: %w", cerr)
		}
	}
	if q.getAppUsageCountByDateRangeStmt != nil {
		if cerr := q.getAppUsageCountByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageCountByDateRangeStmt: %w", cerr)
		}
	}
	if q.getAppUsageHistoryStmt != nil {
		if cerr := q.getAppUsageHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppUsageHistoryStmt: %w", cerr)
		}
	}
	if q.getDailyUsageByDateStmt != nil {
		if cerr := q.getDailyUsageByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailyUsageByDateStmt: %w", cerr)
		}
	}
	if q.getDailyUsageByDateRangeStmt != nil {
		if cerr := q.getDailyUsageByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailyUsageByDateRangeStmt: %w", cerr)
		}
	}
	if q.getRecentAppUsageStmt != nil {
		if cerr := q.getRecentAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentAppUsageStmt: %w", cerr)
		}
	}
	if q.getRecentDailyUsageStmt != nil {
		if cerr := q.getRecentDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentDailyUsageStmt: %w", cerr)
		}
	}
	if q.getTopAppsByDateStmt != nil {
		if cerr := q.getTopAppsByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopAppsByDateStmt: %w", cerr)
		}
	}
	if q.getTopAppsByDateRangeStmt != nil {
		if cerr := q.getTopAppsByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopAppsByDateRangeStmt: %w", cerr)
		}
	}
	if q.getUsageStatsByDateRangeStmt != nil {
		if cerr := q.getUsageStatsByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsageStatsByDateRangeStmt: %w", cerr)
		}
	}
	if q.insertAppUsageStmt != nil {
		if cerr := q.insertAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertAppUsageStmt: %w", cerr)
		}
	}
	if q.updateAppUsageStmt != nil {
		if cerr := q.updateAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAppUsageStmt: %w", cerr)
		}
	}
	if q.updateDailyUsageStmt != nil {
		if cerr := q.updateDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDailyUsageStmt: %w", cerr)
		}
	}
	if q.upsertAppUsageStmt != nil {
		if cerr := q.upsertAppUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertAppUsageStmt: %w", cerr)
		}
	}
	if q.upsertDailyUsageStmt != nil {
		if cerr := q.upsertDailyUsageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertDailyUsageStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	batchUpdateAppUsageStmt             *sql.Stmt
	createAppUsageStmt                  *sql.Stmt
	createDailyUsageStmt                *sql.Stmt
	deleteAppUsageStmt                  *sql.Stmt
	deleteAppUsageByIDStmt              *sql.Stmt
	deleteDailyUsageStmt                *sql.Stmt
	deleteOldAppUsageStmt               *sql.Stmt
	deleteOldDailyUsageStmt             *sql.Stmt
	getAllAppsForDateStmt               *sql.Stmt
	getAllDailyUsageStmt                *sql.Stmt
	getAppUsageByDateStmt               *sql.Stmt
	getAppUsageByDateRangeStmt          *sql.Stmt
	getAppUsageByDateRangePaginatedStmt *sql.Stmt
	getAppUsageByIDStmt                 *sql.Stmt
	getAppUsageByNameAndDateStmt        *sql.Stmt
	getAppUsageByNameAndDateRangeStmt   *sql.Stmt
	getAppUsageCountByDateRangeStmt     *sql.Stmt
	getAppUsageHistoryStmt              *sql.Stmt
	getDailyUsageByDateStmt             *sql.Stmt
	getDailyUsageByDateRangeStmt        *sql.Stmt
	getRecentAppUsageStmt               *sql.Stmt
	getRecentDailyUsageStmt             *sql.Stmt
	getTopAppsByDateStmt                *sql.Stmt
	getTopAppsByDateRangeStmt           *sql.Stmt
	getUsageStatsByDateRangeStmt        *sql.Stmt
	insertAppUsageStmt                  *sql.Stmt
	updateAppUsageStmt                  *sql.Stmt
	updateDailyUsageStmt                *sql.Stmt
	upsertAppUsageStmt                  *sql.Stmt
	upsertDailyUsageStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		batchUpdateAppUsageStmt:             q.batchUpdateAppUsageStmt,
		createAppUsageStmt:                  q.createAppUsageStmt,
		createDailyUsageStmt:                q.createDailyUsageStmt,
		deleteAppUsageStmt:                  q.deleteAppUsageStmt,
		deleteAppUsageByIDStmt:              q.deleteAppUsageByIDStmt,
		deleteDailyUsageStmt:                q.deleteDailyUsageStmt,
		deleteOldAppUsageStmt:               q.deleteOldAppUsageStmt,
		deleteOldDailyUsageStmt:             q.deleteOldDailyUsageStmt,
		getAllAppsForDateStmt:               q.getAllAppsForDateStmt,
		getAllDailyUsageStmt:                q.getAllDailyUsageStmt,
		getAppUsageByDateStmt:               q.getAppUsageByDateStmt,
		getAppUsageByDateRangeStmt:          q.getAppUsageByDateRangeStmt,
		getAppUsageByDateRangePaginatedStmt: q.getAppUsageByDateRangePaginatedStmt,
		getAppUsageByIDStmt:                 q.getAppUsageByIDStmt,
		getAppUsageByNameAndDateStmt:        q.getAppUsageByNameAndDateStmt,
		getAppUsageByNameAndDateRangeStmt:   q.getAppUsageByNameAndDateRangeStmt,
		getAppUsageCountByDateRangeStmt:     q.getAppUsageCountByDateRangeStmt,
		getAppUsageHistoryStmt:              q.getAppUsageHistoryStmt,
		getDailyUsageByDateStmt:             q.getDailyUsageByDateStmt,
		getDailyUsageByDateRangeStmt:        q.getDailyUsageByDateRangeStmt,
		getRecentAppUsageStmt:               q.getRecentAppUsageStmt,
		getRecentDailyUsageStmt:             q.getRecentDailyUsageStmt,
		getTopAppsByDateStmt:                q.getTopAppsByDateStmt,
		getTopAppsByDateRangeStmt:           q.getTopAppsByDateRangeStmt,
		getUsageStatsByDateRangeStmt:        q.getUsageStatsByDateRangeStmt,
		insertAppUsageStmt:                  q.insertAppUsageStmt,
		updateAppUsageStmt:                  q.updateAppUsageStmt,
		updateDailyUsageStmt:                q.updateDailyUsageStmt,
		upsertAppUsageStmt:                  q.upsertAppUsageStmt,
		upsertDailyUsageStmt:                q.upsertDailyUsageStmt,
	}
}
