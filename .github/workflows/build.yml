name: "Build and Test"

on:
  push:
    branches: ["main"]
    tags:
      - "*"
  pull_request:
    branches: ["main"]

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    permissions:
      contents: read
      issues: write
      pull-requests: write
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: "qwin"
            platform: "windows/amd64"
            os: "windows-latest"
          # Future cross-platform support (currently Windows-only app)
          # Uncomment when cross-platform implementation is ready
          # - name: 'qwin'
          #   platform: 'linux/amd64'
          #   os: 'ubuntu-latest'
          # - name: 'qwin'
          #   platform: 'darwin/universal'
          #   os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Setup pnpm before Wails build action (since wails.json uses pnpm commands)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      # Use the official Wails build action (using @main to avoid deprecated upload-artifact@v3)
      - name: Build Wails app
        uses: dAppServer/wails-build-action@main
        id: build
        with:
          build-name: ${{ matrix.build.name }}
          build-platform: ${{ matrix.build.platform }}
          package: false
          go-version: "1.23"
          node-version: "18"

      # Security checks (Windows only for now since app is Windows-specific)
      - name: Run Go tests with race detection
        if: matrix.build.os == 'windows-latest'
        run: go test -race -v ./...

      - name: Run Go security checks
        if: matrix.build.os == 'windows-latest'
        uses: securego/gosec@master
        with:
          args: "./..."
        continue-on-error: true

      - name: Check Go vulnerabilities
        if: matrix.build.os == 'windows-latest'
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      # Frontend linting (can run on all platforms)
      - name: Setup pnpm for linting
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Install frontend dependencies for linting
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run frontend linting
        working-directory: frontend
        run: pnpm run lint

      # Set platform name for artifact (replace / with -)
      - name: Set artifact platform name
        id: platform
        run: |
          $platform = "${{ matrix.build.platform }}" -replace "/", "-"
          echo "name=$platform" >> $env:GITHUB_OUTPUT

      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.build.name }}-${{ steps.platform.outputs.name }}-${{ github.run_number }}
          path: |
            build/bin/*
            !build/bin/*.syso
          retention-days: 30

      # Comment on PR with artifact download link
      - name: Comment on PR with build artifacts
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const artifactName = '${{ matrix.build.name }}-${{ steps.platform.outputs.name }}-${{ github.run_number }}';
            const runId = context.runId;
            const repoUrl = 'https://github.com/${{ github.repository }}';
            const artifactUrl = `${repoUrl}/actions/runs/${runId}`;

            const comment = `## ðŸš€ Build Artifacts Ready!

            **Platform**: \`${{ matrix.build.platform }}\`
            **Build**: \`#${{ github.run_number }}\`

            ðŸ“¦ **Download**: [${artifactName}](${artifactUrl})

            > Artifacts are available for 30 days from the Actions run page.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
